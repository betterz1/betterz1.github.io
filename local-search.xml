<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTTP知识扫盲</title>
    <link href="/2016/05/01/http/"/>
    <url>/2016/05/01/http/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h3 id="什么是HTTP"><a href="#什么是HTTP" class="headerlink" title="什么是HTTP?"></a>什么是HTTP?</h3><ul><li>超文本传输协议, 点到点之间的数据传输协议, 遵循了该协议则可以互相发送消息. HTTP属于七层网络模型中的应用层, 底层传输使用TCP协议, TCP保证数据的可靠性</li></ul><h3 id="HTTP由什么组成"><a href="#HTTP由什么组成" class="headerlink" title="HTTP由什么组成?"></a>HTTP由什么组成?</h3><ol><li>请求地址</li><li>请求方法</li><li>参数/请求体</li><li>请求头</li><li>响应头</li><li>响应体</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/api/user?p1=0&amp;p2=1595323817</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>api.xxx.com<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br></code></pre></td></tr></table></figure><ul><li><code>GET</code> : 方法类型</li><li><code>/api/user</code> : 请求路径</li><li> <code>HTTP/1.1  </code> : 使用的HTTP版本号</li><li><code>Host</code> : 请求域名</li><li><code>Content-Type</code> : 请求的header, 这里代表消息序列化使用json格式</li></ul><h3 id="HTTP有哪些请求类型"><a href="#HTTP有哪些请求类型" class="headerlink" title="HTTP有哪些请求类型?"></a>HTTP有哪些请求类型?</h3><ul><li>GET</li><li>POST</li><li>DELETE</li><li>PUT</li><li>PATCH</li><li>OPTION</li><li>…</li></ul><hr><h3 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h3><h4 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a><strong>V1.0</strong></h4><ul><li>每发起一个请求都要进行TCP三次握手, 请求完毕就断开, 下次请求重新建立连接, 对于资源严重浪费。所有请求严格串行化, 很容易因为前面某次请求慢导致后续请求都变慢。</li></ul><h4 id="V1-1"><a href="#V1-1" class="headerlink" title="V1.1"></a><strong>V1.1</strong></h4><ul><li> 采用了长链接, 第一次请求建立TCP连接, 后续请求会复用该连接, 大大提高了效率。增加了管道, 请求发出后不用等响应可以继续发下一个, 虽然可以减少整体的等待时间, 但是服务器还是按先后顺序处理, 所以依然会造成前面某次请求延迟导致后续请求阻塞, 这里叫做<strong>队头阻塞</strong></li></ul><h4 id="V2-0"><a href="#V2-0" class="headerlink" title="V2.0"></a><strong>V2.0</strong></h4><ul><li><p>头部压缩</p><p>HTTP/2 会压缩头(Header)如果你同时发出多个请求，他们的头是⼀一样的或是相似的，那么，协议会 帮你消除重复的部分<br>这就是所谓的 HPACK 算法:在客户端和服务器器同时维护⼀一张头信息表，所有字段都会存⼊入这个表，⽣生 成⼀一个索引号，以后就不不发送同样字段了了，只发送索引号，这样就提⾼高速度了了。</p><ul><li><p>二进制格式</p><p>​    HTTP/2 不不再像 HTTP/1.1 里的纯⽂本形式的报文，而是全面采用了二进制格式，头信息和数据体都是二进制，并且统称为帧(frame):头信息帧和数据帧。这样虽然对人不友好，但是对计算机非常友好，因为计算机只懂二进制，那么收到报文后，⽆需再将明⽂的报文转成二进制，而是直接解析二进制报文，这增加了数据传输的效率。</p></li><li><p>数据流</p><p>​    HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必<br>须要对数据包做标记，指出它属于哪个回应。每个请求或回应的所有数据包，称为一个数据流( Stream )。每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数客户端还可以指定数据流的优先级。优先级高的请求，服务器就先响应该请求。</p></li><li><p>多路复用</p><p>​    HTTP/2 是可以在一个连接中并发多个请求或回应，⽽不用按照顺序⼀一对应。<br>移除了 HTTP/1.1 中的串行请求，不需要排队等待，也就不会再出现「队头阻塞」问题，降低了延迟， 大幅度提高了连接的利用率。<br>举例来说，在一个 TCP 连里，服务器收到了客户端 A 和 B 的两个请求，如果发现 A 处理过程非常耗时，于是就回应 A 请求已经处理好的部分，接着回应 B 请求，完成后，再回应 A 请求剩下的部分。</p></li><li><p>服务器器推送</p><p>​    HTTP/2 还在一定程度上改善了传统的「请求 - 应答」⼯作模式，服务不再是被动地响应，也可以主动向客户端发送消息。<br>举例来说，在浏览器刚请求 HTML 的时候，就提前把可能会用到的 JS、CSS ⽂件等静态资源主动发给客户端，减少延时的等待，也就是服务器推送(Server Push，也叫 Cache Push)。</p></li><li><p>缺点</p><p>​    HTTP/2 主要的问题在于，多个 HTTP 请求在复⽤一个 TCP 连接，下层的 TCP 协议是不知道有多少个 HTTP 请求的。所以一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的所有 的 HTTP 请求都必须等待这个丢了的包被重传回来。</p></li></ul></li></ul><h4 id="V3-0"><a href="#V3-0" class="headerlink" title="V3.0"></a><strong>V3.0</strong></h4><ul><li>底层由TCP变成了UDP。基于 UDP 的 QUIC 协议 可以实现类似 TCP 的可靠性传输。<br>UDP 发生是不管顺序，也不管丢包的，所以不会出现 HTTP/1.1 的队头阻塞 和 HTTP/2 的一个丢包全部重传问题。<br>QUIC 有⾃己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响。<br>TLS3 升级成了最新的 1.3 版本，头部压缩算法也升级成了 QPack 。<br>HTTPS 要建立一个连接，要花费6次交互，先是建立三次握手，然后是TLS/1.3 的三次握手。QUIC直接把以往的 TCP 和 TLS/1.3 的6次交互合并成了3次，减少了交互次数。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2016/03/03/hello-world/"/>
    <url>/2016/03/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
